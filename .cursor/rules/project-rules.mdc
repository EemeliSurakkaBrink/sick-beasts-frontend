---
description: 
globs: 
alwaysApply: true
---
## Project Overview

*   **Type:** E-commerce Store
*   **Description:** An e-commerce store for a skate clothing brand selling sustainable print-on-demand t-shirts with a dark, high-contrast design and tongue-in-cheek humor.
*   **Primary Goal:** Build an e-commerce store for a skate clothing brand that sells sustainable print-on-demand t-shirts while integrating key features such as a cool carousel UI, shopping basket with checkout, account system, and robust admin interface.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   `Next.js 15`: Use the App Router pattern with an `app/` directory for nested route folders (e.g., `app/[route]/page.tsx`).
    *   Example 1: "Next.js 15 (App Router)" → `app/[route]/page.tsx` conventions
    *   Example 2: (If Pages Router applicable, not in this project) → `pages/[route].tsx` pattern
    *   Example 3: For other frameworks (e.g., React Router) → Use directory structures under `src/routes/` with `createBrowserRouter`

### Core Directories

*   **Versioned Structure:**

    *   `app/api`: Next.js 15 API routes with Route Handlers for backend functionalities like payment gateways and Gelato API integrations.
    *   `app/dashboard`: Next.js 15 directory for admin components (the CMS and admin interface strictly managed through Sanity CMS remain separate).
    *   `app/auth`: Route for account system pages such as login and registration.
    *   `app/home`: Contains key pages like the carousel UI for product showcases and customer reviews.

### Key Files

*   **Stack-Versioned Patterns:**

    *   `app/home/page.tsx`: Implements the homepage with the Swiper.js carousel UI displaying latest t-shirt designs and customer reviews.
    *   `app/auth/login/page.tsx`: Implements the login page using server actions and secure authentication flows.
    *   `app/dashboard/layout.tsx`: Acts as the root layout for the t-shirt admin interface where Sanity CMS manages product, orders, and customer data (via API integrations).

## Tech Stack Rules

*   **Version Enforcement:**

    *   `next@15`: Enforce the App Router pattern in an `app/` directory with nested route folders; ensure usage of React Server Components where applicable.
    *   `tailwindcss@latest`: Use Tailwind for styling components, ensuring responsiveness and a dark, high-contrast theme.
    *   `swiper.js@latest`: Implement Swiper.js for interactive carousel UIs with smooth transitions and mobile optimizations.
    *   `sanity@latest`: Strictly manage CMS and admin operations, ensuring secure data handling, especially for payment and customer management.

## PRD Compliance

*   **Non-Negotiable:**

    *   "The CMS and admin interface will be strictly managed through Sanity CMS; custom feature requests outside those frameworks are out-of-scope for this version." : This enforces that all admin features, product management, order handling, and marketing integrations should align with Sanity CMS constraints.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Next.js 15 Auth Flow" → `app/auth/login/page.tsx` uses server actions for secure authentication and session handling.
    *   Example: The homepage (`app/home/page.tsx`) integrates Swiper.js for a dynamic carousel UI, ensuring a smooth display of t-shirt designs and reviews.

## Best Practices

*   Next.js

    *   Use the App Router with server components for improved performance and scalability.
    *   Enforce code-splitting and lazy loading for enhanced user experience.
    *   Ensure SEO best practices with proper metadata and dynamic routing.

*   Sanity CMS

    *   Adhere to Sanity's structure for clean separation of content and presentation concerns.
    *   Ensure secure API endpoints and proper validation for admin functionalities.
    *   Use Sanity's built-in features for content management and scalable data handling.

*   Tailwind CSS

    *   Utilize utility-first classes for responsive design and rapid prototyping.
    *   Ensure consistent theming with custom configurations to match the dark, high-contrast design.
    *   Use Tailwind’s performance optimizations like PurgeCSS to remove unused styles.

*   Swiper.js

    *   Optimize for both desktop and mobile interactions.
    *   Ensure smooth transitions and responsive behavior.
    *   Integrate with Next.js server components seamlessly for dynamic content loading.

*   shadcn

    *   Follow component library best practices for maintainable UI elements.
    *   Customize components to align with the overall dark aesthetic.
    *   Modularize UI components to enhance reusability and scalability.

## Rules

*   Derive folder/file patterns **directly** from the tech stack versions provided, ensuring Next.js 15 uses the App Router (`app/` directory) exclusively.
*   If Next.js 15 App Router is used: Enforce the `app/` directory with nested route folders and do not use `pages/`.
*   For backend/admin interfaces, mirror Sanity CMS conventions, strictly separating admin routes and frontend logic.
*   Ensure that shipping/returns policies (14-day cooling-off period) and scalability considerations are reflected in both frontend user interactions and backend processing.
*   Maintain clear separation of concerns between frontend (Next.js) and backend (Sanity CMS) systems to avoid mixing incompatible version patterns.

By adhering to these guidelines, the project will effectively utilize the tech stack to create a seamless and scalable e-commerce platform for the skate clothing brand.
